/* 
 * CryptoWeather
 *
 * The CryptoWeather API allows for access to all of the cryptocurrency data and market forecast services provided. There are two primary categories of routes, `public` and `private`, where `public` routes are accessible to the general public and do not require API authentication, and `private` routes, which require API authentication.  ## General Overview  1. All API methods adhere to RESTful best practices as closely as possible. As such, all API calls will be made via the standard HTTP protocol using the GET/POST/PUT/DELETE request types.  2. Every request returns the status as a JSON response with the following:     - success, true if it was successful     - code, the http status code (also in the response header)         - 200 if response is successful         - 400 if bad request         - 401 if authorization JWT is wrong or limit exceeded         - 404 wrong route         - 500 for any internal errors     - status, the status of the request, default **success**     - errors, an array of any relevant error details  3. For any requests that are not successful an error message is specified and returned as an array for the **errors** key in the JSON response.  4. All authentication uses JSON Web Tokens (JWT), which is set as the **Authorization** entry in the header, see the following for more details.     - http://jwt.io     - https://scotch.io/tutorials/the-anatomy-of-a-json-web-token  ## Code Example  The following is a code example in Python, which demonstrates using the [Python Requests library](https://requests.readthedocs.io/en/master/) for both the `public` and `private` API routes.  ``` import requests  HOST = \"https://api.cryptoweather.ai/v1\"  # Your API key (JWT) API_KEY = \"<YOUR API KEY>\"  # Example public request, no API key required. requests.get(\"{}/public/symbols\".format(HOST)).json()  # Get the current btc price using the public route requests.get(\"{}/public/price-current/{}\".format(HOST, \"btc\")).json()   # Example private request, API key required. Get the btc hourly forecasts headers = {\"Authorization\": \"Bearer {}\".format(API_KEY)} requests.get(\"{}/private/forecast/{}/{}\".format(HOST, \"btc\", \"1h\"),              headers=headers).json() ```
 *
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPublicApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Price Change
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <returns>PublicPriceChangeResponse</returns>
        PublicPriceChangeResponse V1PublicPriceChangeSymbolGet (string symbol);

        /// <summary>
        /// Price Change
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <returns>ApiResponse of PublicPriceChangeResponse</returns>
        ApiResponse<PublicPriceChangeResponse> V1PublicPriceChangeSymbolGetWithHttpInfo (string symbol);
        /// <summary>
        /// Price Current
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol, provide &#x60;all&#x60; to get every symbol.</param>
        /// <returns>PublicPriceCurrentResponse</returns>
        PublicPriceCurrentResponse V1PublicPriceCurrentSymbolGet (string symbol);

        /// <summary>
        /// Price Current
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol, provide &#x60;all&#x60; to get every symbol.</param>
        /// <returns>ApiResponse of PublicPriceCurrentResponse</returns>
        ApiResponse<PublicPriceCurrentResponse> V1PublicPriceCurrentSymbolGetWithHttpInfo (string symbol);
        /// <summary>
        /// Price History
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol, provide &#x60;all&#x60; to get every symbol.</param>
        /// <param name="period">The period to get data for, such as past 30 days.</param>
        /// <param name="interval">The bar interval, such as 1 day.</param>
        /// <returns>PublicPriceHistoryResponse</returns>
        PublicPriceHistoryResponse V1PublicPriceHistorySymbolPeriodIntervalGet (string symbol, string period, string interval);

        /// <summary>
        /// Price History
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol, provide &#x60;all&#x60; to get every symbol.</param>
        /// <param name="period">The period to get data for, such as past 30 days.</param>
        /// <param name="interval">The bar interval, such as 1 day.</param>
        /// <returns>ApiResponse of PublicPriceHistoryResponse</returns>
        ApiResponse<PublicPriceHistoryResponse> V1PublicPriceHistorySymbolPeriodIntervalGetWithHttpInfo (string symbol, string period, string interval);
        /// <summary>
        /// Summary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PublicSummaryResponse</returns>
        PublicSummaryResponse V1PublicSummaryGet ();

        /// <summary>
        /// Summary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PublicSummaryResponse</returns>
        ApiResponse<PublicSummaryResponse> V1PublicSummaryGetWithHttpInfo ();
        /// <summary>
        /// Symbols
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PublicSymbolsResponse</returns>
        PublicSymbolsResponse V1PublicSymbolsGet ();

        /// <summary>
        /// Symbols
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PublicSymbolsResponse</returns>
        ApiResponse<PublicSymbolsResponse> V1PublicSymbolsGetWithHttpInfo ();
        /// <summary>
        /// Trend
        /// </summary>
        /// <remarks>
        /// The trend response contains a collection of forecasts for different intervals with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;interval&#x60; interval in hours that the forecast is applicable for  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <returns>PublicTrendResponse</returns>
        PublicTrendResponse V1PublicTrendSymbolGet (string symbol);

        /// <summary>
        /// Trend
        /// </summary>
        /// <remarks>
        /// The trend response contains a collection of forecasts for different intervals with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;interval&#x60; interval in hours that the forecast is applicable for  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <returns>ApiResponse of PublicTrendResponse</returns>
        ApiResponse<PublicTrendResponse> V1PublicTrendSymbolGetWithHttpInfo (string symbol);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Price Change
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <returns>Task of PublicPriceChangeResponse</returns>
        System.Threading.Tasks.Task<PublicPriceChangeResponse> V1PublicPriceChangeSymbolGetAsync (string symbol);

        /// <summary>
        /// Price Change
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <returns>Task of ApiResponse (PublicPriceChangeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicPriceChangeResponse>> V1PublicPriceChangeSymbolGetAsyncWithHttpInfo (string symbol);
        /// <summary>
        /// Price Current
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol, provide &#x60;all&#x60; to get every symbol.</param>
        /// <returns>Task of PublicPriceCurrentResponse</returns>
        System.Threading.Tasks.Task<PublicPriceCurrentResponse> V1PublicPriceCurrentSymbolGetAsync (string symbol);

        /// <summary>
        /// Price Current
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol, provide &#x60;all&#x60; to get every symbol.</param>
        /// <returns>Task of ApiResponse (PublicPriceCurrentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicPriceCurrentResponse>> V1PublicPriceCurrentSymbolGetAsyncWithHttpInfo (string symbol);
        /// <summary>
        /// Price History
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol, provide &#x60;all&#x60; to get every symbol.</param>
        /// <param name="period">The period to get data for, such as past 30 days.</param>
        /// <param name="interval">The bar interval, such as 1 day.</param>
        /// <returns>Task of PublicPriceHistoryResponse</returns>
        System.Threading.Tasks.Task<PublicPriceHistoryResponse> V1PublicPriceHistorySymbolPeriodIntervalGetAsync (string symbol, string period, string interval);

        /// <summary>
        /// Price History
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol, provide &#x60;all&#x60; to get every symbol.</param>
        /// <param name="period">The period to get data for, such as past 30 days.</param>
        /// <param name="interval">The bar interval, such as 1 day.</param>
        /// <returns>Task of ApiResponse (PublicPriceHistoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicPriceHistoryResponse>> V1PublicPriceHistorySymbolPeriodIntervalGetAsyncWithHttpInfo (string symbol, string period, string interval);
        /// <summary>
        /// Summary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PublicSummaryResponse</returns>
        System.Threading.Tasks.Task<PublicSummaryResponse> V1PublicSummaryGetAsync ();

        /// <summary>
        /// Summary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PublicSummaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicSummaryResponse>> V1PublicSummaryGetAsyncWithHttpInfo ();
        /// <summary>
        /// Symbols
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PublicSymbolsResponse</returns>
        System.Threading.Tasks.Task<PublicSymbolsResponse> V1PublicSymbolsGetAsync ();

        /// <summary>
        /// Symbols
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PublicSymbolsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicSymbolsResponse>> V1PublicSymbolsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Trend
        /// </summary>
        /// <remarks>
        /// The trend response contains a collection of forecasts for different intervals with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;interval&#x60; interval in hours that the forecast is applicable for  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <returns>Task of PublicTrendResponse</returns>
        System.Threading.Tasks.Task<PublicTrendResponse> V1PublicTrendSymbolGetAsync (string symbol);

        /// <summary>
        /// Trend
        /// </summary>
        /// <remarks>
        /// The trend response contains a collection of forecasts for different intervals with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;interval&#x60; interval in hours that the forecast is applicable for  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <returns>Task of ApiResponse (PublicTrendResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicTrendResponse>> V1PublicTrendSymbolGetAsyncWithHttpInfo (string symbol);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PublicApi : IPublicApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PublicApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PublicApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Price Change 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <returns>PublicPriceChangeResponse</returns>
        public PublicPriceChangeResponse V1PublicPriceChangeSymbolGet (string symbol)
        {
             ApiResponse<PublicPriceChangeResponse> localVarResponse = V1PublicPriceChangeSymbolGetWithHttpInfo(symbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Price Change 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <returns>ApiResponse of PublicPriceChangeResponse</returns>
        public ApiResponse< PublicPriceChangeResponse > V1PublicPriceChangeSymbolGetWithHttpInfo (string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PublicApi->V1PublicPriceChangeSymbolGet");

            var localVarPath = "/v1/public/price-change/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PublicPriceChangeSymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicPriceChangeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicPriceChangeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicPriceChangeResponse)));
        }

        /// <summary>
        /// Price Change 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <returns>Task of PublicPriceChangeResponse</returns>
        public async System.Threading.Tasks.Task<PublicPriceChangeResponse> V1PublicPriceChangeSymbolGetAsync (string symbol)
        {
             ApiResponse<PublicPriceChangeResponse> localVarResponse = await V1PublicPriceChangeSymbolGetAsyncWithHttpInfo(symbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Price Change 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <returns>Task of ApiResponse (PublicPriceChangeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PublicPriceChangeResponse>> V1PublicPriceChangeSymbolGetAsyncWithHttpInfo (string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PublicApi->V1PublicPriceChangeSymbolGet");

            var localVarPath = "/v1/public/price-change/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PublicPriceChangeSymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicPriceChangeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicPriceChangeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicPriceChangeResponse)));
        }

        /// <summary>
        /// Price Current 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol, provide &#x60;all&#x60; to get every symbol.</param>
        /// <returns>PublicPriceCurrentResponse</returns>
        public PublicPriceCurrentResponse V1PublicPriceCurrentSymbolGet (string symbol)
        {
             ApiResponse<PublicPriceCurrentResponse> localVarResponse = V1PublicPriceCurrentSymbolGetWithHttpInfo(symbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Price Current 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol, provide &#x60;all&#x60; to get every symbol.</param>
        /// <returns>ApiResponse of PublicPriceCurrentResponse</returns>
        public ApiResponse< PublicPriceCurrentResponse > V1PublicPriceCurrentSymbolGetWithHttpInfo (string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PublicApi->V1PublicPriceCurrentSymbolGet");

            var localVarPath = "/v1/public/price-current/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PublicPriceCurrentSymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicPriceCurrentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicPriceCurrentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicPriceCurrentResponse)));
        }

        /// <summary>
        /// Price Current 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol, provide &#x60;all&#x60; to get every symbol.</param>
        /// <returns>Task of PublicPriceCurrentResponse</returns>
        public async System.Threading.Tasks.Task<PublicPriceCurrentResponse> V1PublicPriceCurrentSymbolGetAsync (string symbol)
        {
             ApiResponse<PublicPriceCurrentResponse> localVarResponse = await V1PublicPriceCurrentSymbolGetAsyncWithHttpInfo(symbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Price Current 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol, provide &#x60;all&#x60; to get every symbol.</param>
        /// <returns>Task of ApiResponse (PublicPriceCurrentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PublicPriceCurrentResponse>> V1PublicPriceCurrentSymbolGetAsyncWithHttpInfo (string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PublicApi->V1PublicPriceCurrentSymbolGet");

            var localVarPath = "/v1/public/price-current/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PublicPriceCurrentSymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicPriceCurrentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicPriceCurrentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicPriceCurrentResponse)));
        }

        /// <summary>
        /// Price History 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol, provide &#x60;all&#x60; to get every symbol.</param>
        /// <param name="period">The period to get data for, such as past 30 days.</param>
        /// <param name="interval">The bar interval, such as 1 day.</param>
        /// <returns>PublicPriceHistoryResponse</returns>
        public PublicPriceHistoryResponse V1PublicPriceHistorySymbolPeriodIntervalGet (string symbol, string period, string interval)
        {
             ApiResponse<PublicPriceHistoryResponse> localVarResponse = V1PublicPriceHistorySymbolPeriodIntervalGetWithHttpInfo(symbol, period, interval);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Price History 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol, provide &#x60;all&#x60; to get every symbol.</param>
        /// <param name="period">The period to get data for, such as past 30 days.</param>
        /// <param name="interval">The bar interval, such as 1 day.</param>
        /// <returns>ApiResponse of PublicPriceHistoryResponse</returns>
        public ApiResponse< PublicPriceHistoryResponse > V1PublicPriceHistorySymbolPeriodIntervalGetWithHttpInfo (string symbol, string period, string interval)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PublicApi->V1PublicPriceHistorySymbolPeriodIntervalGet");
            // verify the required parameter 'period' is set
            if (period == null)
                throw new ApiException(400, "Missing required parameter 'period' when calling PublicApi->V1PublicPriceHistorySymbolPeriodIntervalGet");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling PublicApi->V1PublicPriceHistorySymbolPeriodIntervalGet");

            var localVarPath = "/v1/public/price-history/{symbol}/{period}/{interval}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter
            if (period != null) localVarPathParams.Add("period", this.Configuration.ApiClient.ParameterToString(period)); // path parameter
            if (interval != null) localVarPathParams.Add("interval", this.Configuration.ApiClient.ParameterToString(interval)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PublicPriceHistorySymbolPeriodIntervalGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicPriceHistoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicPriceHistoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicPriceHistoryResponse)));
        }

        /// <summary>
        /// Price History 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol, provide &#x60;all&#x60; to get every symbol.</param>
        /// <param name="period">The period to get data for, such as past 30 days.</param>
        /// <param name="interval">The bar interval, such as 1 day.</param>
        /// <returns>Task of PublicPriceHistoryResponse</returns>
        public async System.Threading.Tasks.Task<PublicPriceHistoryResponse> V1PublicPriceHistorySymbolPeriodIntervalGetAsync (string symbol, string period, string interval)
        {
             ApiResponse<PublicPriceHistoryResponse> localVarResponse = await V1PublicPriceHistorySymbolPeriodIntervalGetAsyncWithHttpInfo(symbol, period, interval);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Price History 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol, provide &#x60;all&#x60; to get every symbol.</param>
        /// <param name="period">The period to get data for, such as past 30 days.</param>
        /// <param name="interval">The bar interval, such as 1 day.</param>
        /// <returns>Task of ApiResponse (PublicPriceHistoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PublicPriceHistoryResponse>> V1PublicPriceHistorySymbolPeriodIntervalGetAsyncWithHttpInfo (string symbol, string period, string interval)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PublicApi->V1PublicPriceHistorySymbolPeriodIntervalGet");
            // verify the required parameter 'period' is set
            if (period == null)
                throw new ApiException(400, "Missing required parameter 'period' when calling PublicApi->V1PublicPriceHistorySymbolPeriodIntervalGet");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling PublicApi->V1PublicPriceHistorySymbolPeriodIntervalGet");

            var localVarPath = "/v1/public/price-history/{symbol}/{period}/{interval}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter
            if (period != null) localVarPathParams.Add("period", this.Configuration.ApiClient.ParameterToString(period)); // path parameter
            if (interval != null) localVarPathParams.Add("interval", this.Configuration.ApiClient.ParameterToString(interval)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PublicPriceHistorySymbolPeriodIntervalGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicPriceHistoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicPriceHistoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicPriceHistoryResponse)));
        }

        /// <summary>
        /// Summary 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PublicSummaryResponse</returns>
        public PublicSummaryResponse V1PublicSummaryGet ()
        {
             ApiResponse<PublicSummaryResponse> localVarResponse = V1PublicSummaryGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Summary 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PublicSummaryResponse</returns>
        public ApiResponse< PublicSummaryResponse > V1PublicSummaryGetWithHttpInfo ()
        {

            var localVarPath = "/v1/public/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PublicSummaryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicSummaryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicSummaryResponse)));
        }

        /// <summary>
        /// Summary 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PublicSummaryResponse</returns>
        public async System.Threading.Tasks.Task<PublicSummaryResponse> V1PublicSummaryGetAsync ()
        {
             ApiResponse<PublicSummaryResponse> localVarResponse = await V1PublicSummaryGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Summary 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PublicSummaryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PublicSummaryResponse>> V1PublicSummaryGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/public/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PublicSummaryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicSummaryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicSummaryResponse)));
        }

        /// <summary>
        /// Symbols 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PublicSymbolsResponse</returns>
        public PublicSymbolsResponse V1PublicSymbolsGet ()
        {
             ApiResponse<PublicSymbolsResponse> localVarResponse = V1PublicSymbolsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Symbols 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PublicSymbolsResponse</returns>
        public ApiResponse< PublicSymbolsResponse > V1PublicSymbolsGetWithHttpInfo ()
        {

            var localVarPath = "/v1/public/symbols";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PublicSymbolsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicSymbolsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicSymbolsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicSymbolsResponse)));
        }

        /// <summary>
        /// Symbols 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PublicSymbolsResponse</returns>
        public async System.Threading.Tasks.Task<PublicSymbolsResponse> V1PublicSymbolsGetAsync ()
        {
             ApiResponse<PublicSymbolsResponse> localVarResponse = await V1PublicSymbolsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Symbols 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PublicSymbolsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PublicSymbolsResponse>> V1PublicSymbolsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/public/symbols";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PublicSymbolsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicSymbolsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicSymbolsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicSymbolsResponse)));
        }

        /// <summary>
        /// Trend The trend response contains a collection of forecasts for different intervals with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;interval&#x60; interval in hours that the forecast is applicable for  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <returns>PublicTrendResponse</returns>
        public PublicTrendResponse V1PublicTrendSymbolGet (string symbol)
        {
             ApiResponse<PublicTrendResponse> localVarResponse = V1PublicTrendSymbolGetWithHttpInfo(symbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Trend The trend response contains a collection of forecasts for different intervals with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;interval&#x60; interval in hours that the forecast is applicable for  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <returns>ApiResponse of PublicTrendResponse</returns>
        public ApiResponse< PublicTrendResponse > V1PublicTrendSymbolGetWithHttpInfo (string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PublicApi->V1PublicTrendSymbolGet");

            var localVarPath = "/v1/public/trend/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PublicTrendSymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicTrendResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicTrendResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicTrendResponse)));
        }

        /// <summary>
        /// Trend The trend response contains a collection of forecasts for different intervals with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;interval&#x60; interval in hours that the forecast is applicable for  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <returns>Task of PublicTrendResponse</returns>
        public async System.Threading.Tasks.Task<PublicTrendResponse> V1PublicTrendSymbolGetAsync (string symbol)
        {
             ApiResponse<PublicTrendResponse> localVarResponse = await V1PublicTrendSymbolGetAsyncWithHttpInfo(symbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Trend The trend response contains a collection of forecasts for different intervals with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;interval&#x60; interval in hours that the forecast is applicable for  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <returns>Task of ApiResponse (PublicTrendResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PublicTrendResponse>> V1PublicTrendSymbolGetAsyncWithHttpInfo (string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PublicApi->V1PublicTrendSymbolGet");

            var localVarPath = "/v1/public/trend/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PublicTrendSymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicTrendResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicTrendResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicTrendResponse)));
        }

    }
}
