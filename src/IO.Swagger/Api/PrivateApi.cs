/* 
 * CryptoWeather
 *
 * The CryptoWeather API allows for access to all of the cryptocurrency data and market forecast services provided. There are two primary categories of routes, `public` and `private`, where `public` routes are accessible to the general public and do not require API authentication, and `private` routes, which require API authentication.  ## General Overview  1. All API methods adhere to RESTful best practices as closely as possible. As such, all API calls will be made via the standard HTTP protocol using the GET/POST/PUT/DELETE request types.  2. Every request returns the status as a JSON response with the following:     - success, true if it was successful     - code, the http status code (also in the response header)         - 200 if response is successful         - 400 if bad request         - 401 if authorization JWT is wrong or limit exceeded         - 404 wrong route         - 500 for any internal errors     - status, the status of the request, default **success**     - errors, an array of any relevant error details  3. For any requests that are not successful an error message is specified and returned as an array for the **errors** key in the JSON response.  4. All authentication uses JSON Web Tokens (JWT), which is set as the **Authorization** entry in the header, see the following for more details.     - http://jwt.io     - https://scotch.io/tutorials/the-anatomy-of-a-json-web-token  ## Code Example  The following is a code example in Python, which demonstrates using the [Python Requests library](https://requests.readthedocs.io/en/master/) for both the `public` and `private` API routes.  ``` import requests  HOST = \"https://api.cryptoweather.ai/v1\"  # Your API key (JWT) API_KEY = \"<YOUR API KEY>\"  # Example public request, no API key required. requests.get(\"{}/public/symbols\".format(HOST)).json()  # Get the current btc price using the public route requests.get(\"{}/public/price-current/{}\".format(HOST, \"btc\")).json()   # Example private request, API key required. Get the btc hourly forecasts headers = {\"Authorization\": \"Bearer {}\".format(API_KEY)} requests.get(\"{}/private/forecast/{}/{}\".format(HOST, \"btc\", \"1h\"),              headers=headers).json() ```
 *
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPrivateApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accuracy
        /// </summary>
        /// <remarks>
        /// The accuracy response contains the following attributes.  + &#x60;rmse&#x60; Root Mean Square Error  + &#x60;mae&#x60; Mean Absolute error  + &#x60;r2&#x60; R Squared  + &#x60;ci&#x60; Confidence Interval lower and upper error bounds
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="interval">The forecast interval, 1h or 1d.</param>
        /// <param name="period">The period for computing the accuracy, such as the past 7 days.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>PrivateAccuracyResponse</returns>
        PrivateAccuracyResponse V1PrivateAccuracySymbolIntervalPeriodGet (string symbol, string interval, string period, string cookie = null, string xCsrf = null);

        /// <summary>
        /// Accuracy
        /// </summary>
        /// <remarks>
        /// The accuracy response contains the following attributes.  + &#x60;rmse&#x60; Root Mean Square Error  + &#x60;mae&#x60; Mean Absolute error  + &#x60;r2&#x60; R Squared  + &#x60;ci&#x60; Confidence Interval lower and upper error bounds
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="interval">The forecast interval, 1h or 1d.</param>
        /// <param name="period">The period for computing the accuracy, such as the past 7 days.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>ApiResponse of PrivateAccuracyResponse</returns>
        ApiResponse<PrivateAccuracyResponse> V1PrivateAccuracySymbolIntervalPeriodGetWithHttpInfo (string symbol, string interval, string period, string cookie = null, string xCsrf = null);
        /// <summary>
        /// Forecast
        /// </summary>
        /// <remarks>
        /// The forecast response contains a sequence of forecasts at the specified intervals, with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;low&#x60; forecasted high during the period  + &#x60;high&#x60; forecasted low during the period  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="interval">The forecast interval, 1h or 1d.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>PrivateForecastResponse</returns>
        PrivateForecastResponse V1PrivateForecastSymbolIntervalGet (string symbol, string interval, string cookie = null, string xCsrf = null);

        /// <summary>
        /// Forecast
        /// </summary>
        /// <remarks>
        /// The forecast response contains a sequence of forecasts at the specified intervals, with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;low&#x60; forecasted high during the period  + &#x60;high&#x60; forecasted low during the period  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="interval">The forecast interval, 1h or 1d.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>ApiResponse of PrivateForecastResponse</returns>
        ApiResponse<PrivateForecastResponse> V1PrivateForecastSymbolIntervalGetWithHttpInfo (string symbol, string interval, string cookie = null, string xCsrf = null);
        /// <summary>
        /// Forecast Time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="interval">The forecast interval, 1h or 1d.</param>
        /// <param name="period">The period for computing the error bounds, typically 7d or 30d.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>PrivateForecastTimeResponse</returns>
        PrivateForecastTimeResponse V1PrivateForecastTimeSymbolIntervalPeriodGet (string symbol, string interval, string period, string cookie = null, string xCsrf = null);

        /// <summary>
        /// Forecast Time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="interval">The forecast interval, 1h or 1d.</param>
        /// <param name="period">The period for computing the error bounds, typically 7d or 30d.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>ApiResponse of PrivateForecastTimeResponse</returns>
        ApiResponse<PrivateForecastTimeResponse> V1PrivateForecastTimeSymbolIntervalPeriodGetWithHttpInfo (string symbol, string interval, string period, string cookie = null, string xCsrf = null);
        /// <summary>
        /// Trend
        /// </summary>
        /// <remarks>
        /// The trend response contains a collection of forecasts for different intervals with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;interval&#x60; interval in hours that the forecast is applicable for  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>PublicTrendResponse</returns>
        PublicTrendResponse V1PrivateTrendSymbolGet (string symbol, string cookie = null, string xCsrf = null);

        /// <summary>
        /// Trend
        /// </summary>
        /// <remarks>
        /// The trend response contains a collection of forecasts for different intervals with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;interval&#x60; interval in hours that the forecast is applicable for  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>ApiResponse of PublicTrendResponse</returns>
        ApiResponse<PublicTrendResponse> V1PrivateTrendSymbolGetWithHttpInfo (string symbol, string cookie = null, string xCsrf = null);
        /// <summary>
        /// Trend Tabular
        /// </summary>
        /// <remarks>
        /// The trend tabular response contains a collection of forecasts for all supported cryptocurrencies at different intervals with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;interval&#x60; interval in hours that the forecast is applicable for  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>PrivateTrendTabularResponse</returns>
        PrivateTrendTabularResponse V1PrivateTrendTabularGet (string cookie = null, string xCsrf = null);

        /// <summary>
        /// Trend Tabular
        /// </summary>
        /// <remarks>
        /// The trend tabular response contains a collection of forecasts for all supported cryptocurrencies at different intervals with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;interval&#x60; interval in hours that the forecast is applicable for  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>ApiResponse of PrivateTrendTabularResponse</returns>
        ApiResponse<PrivateTrendTabularResponse> V1PrivateTrendTabularGetWithHttpInfo (string cookie = null, string xCsrf = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Accuracy
        /// </summary>
        /// <remarks>
        /// The accuracy response contains the following attributes.  + &#x60;rmse&#x60; Root Mean Square Error  + &#x60;mae&#x60; Mean Absolute error  + &#x60;r2&#x60; R Squared  + &#x60;ci&#x60; Confidence Interval lower and upper error bounds
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="interval">The forecast interval, 1h or 1d.</param>
        /// <param name="period">The period for computing the accuracy, such as the past 7 days.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>Task of PrivateAccuracyResponse</returns>
        System.Threading.Tasks.Task<PrivateAccuracyResponse> V1PrivateAccuracySymbolIntervalPeriodGetAsync (string symbol, string interval, string period, string cookie = null, string xCsrf = null);

        /// <summary>
        /// Accuracy
        /// </summary>
        /// <remarks>
        /// The accuracy response contains the following attributes.  + &#x60;rmse&#x60; Root Mean Square Error  + &#x60;mae&#x60; Mean Absolute error  + &#x60;r2&#x60; R Squared  + &#x60;ci&#x60; Confidence Interval lower and upper error bounds
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="interval">The forecast interval, 1h or 1d.</param>
        /// <param name="period">The period for computing the accuracy, such as the past 7 days.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>Task of ApiResponse (PrivateAccuracyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrivateAccuracyResponse>> V1PrivateAccuracySymbolIntervalPeriodGetAsyncWithHttpInfo (string symbol, string interval, string period, string cookie = null, string xCsrf = null);
        /// <summary>
        /// Forecast
        /// </summary>
        /// <remarks>
        /// The forecast response contains a sequence of forecasts at the specified intervals, with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;low&#x60; forecasted high during the period  + &#x60;high&#x60; forecasted low during the period  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="interval">The forecast interval, 1h or 1d.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>Task of PrivateForecastResponse</returns>
        System.Threading.Tasks.Task<PrivateForecastResponse> V1PrivateForecastSymbolIntervalGetAsync (string symbol, string interval, string cookie = null, string xCsrf = null);

        /// <summary>
        /// Forecast
        /// </summary>
        /// <remarks>
        /// The forecast response contains a sequence of forecasts at the specified intervals, with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;low&#x60; forecasted high during the period  + &#x60;high&#x60; forecasted low during the period  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="interval">The forecast interval, 1h or 1d.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>Task of ApiResponse (PrivateForecastResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrivateForecastResponse>> V1PrivateForecastSymbolIntervalGetAsyncWithHttpInfo (string symbol, string interval, string cookie = null, string xCsrf = null);
        /// <summary>
        /// Forecast Time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="interval">The forecast interval, 1h or 1d.</param>
        /// <param name="period">The period for computing the error bounds, typically 7d or 30d.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>Task of PrivateForecastTimeResponse</returns>
        System.Threading.Tasks.Task<PrivateForecastTimeResponse> V1PrivateForecastTimeSymbolIntervalPeriodGetAsync (string symbol, string interval, string period, string cookie = null, string xCsrf = null);

        /// <summary>
        /// Forecast Time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="interval">The forecast interval, 1h or 1d.</param>
        /// <param name="period">The period for computing the error bounds, typically 7d or 30d.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>Task of ApiResponse (PrivateForecastTimeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrivateForecastTimeResponse>> V1PrivateForecastTimeSymbolIntervalPeriodGetAsyncWithHttpInfo (string symbol, string interval, string period, string cookie = null, string xCsrf = null);
        /// <summary>
        /// Trend
        /// </summary>
        /// <remarks>
        /// The trend response contains a collection of forecasts for different intervals with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;interval&#x60; interval in hours that the forecast is applicable for  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>Task of PublicTrendResponse</returns>
        System.Threading.Tasks.Task<PublicTrendResponse> V1PrivateTrendSymbolGetAsync (string symbol, string cookie = null, string xCsrf = null);

        /// <summary>
        /// Trend
        /// </summary>
        /// <remarks>
        /// The trend response contains a collection of forecasts for different intervals with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;interval&#x60; interval in hours that the forecast is applicable for  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>Task of ApiResponse (PublicTrendResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicTrendResponse>> V1PrivateTrendSymbolGetAsyncWithHttpInfo (string symbol, string cookie = null, string xCsrf = null);
        /// <summary>
        /// Trend Tabular
        /// </summary>
        /// <remarks>
        /// The trend tabular response contains a collection of forecasts for all supported cryptocurrencies at different intervals with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;interval&#x60; interval in hours that the forecast is applicable for  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>Task of PrivateTrendTabularResponse</returns>
        System.Threading.Tasks.Task<PrivateTrendTabularResponse> V1PrivateTrendTabularGetAsync (string cookie = null, string xCsrf = null);

        /// <summary>
        /// Trend Tabular
        /// </summary>
        /// <remarks>
        /// The trend tabular response contains a collection of forecasts for all supported cryptocurrencies at different intervals with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;interval&#x60; interval in hours that the forecast is applicable for  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>Task of ApiResponse (PrivateTrendTabularResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrivateTrendTabularResponse>> V1PrivateTrendTabularGetAsyncWithHttpInfo (string cookie = null, string xCsrf = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PrivateApi : IPrivateApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PrivateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PrivateApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PrivateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PrivateApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Accuracy The accuracy response contains the following attributes.  + &#x60;rmse&#x60; Root Mean Square Error  + &#x60;mae&#x60; Mean Absolute error  + &#x60;r2&#x60; R Squared  + &#x60;ci&#x60; Confidence Interval lower and upper error bounds
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="interval">The forecast interval, 1h or 1d.</param>
        /// <param name="period">The period for computing the accuracy, such as the past 7 days.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>PrivateAccuracyResponse</returns>
        public PrivateAccuracyResponse V1PrivateAccuracySymbolIntervalPeriodGet (string symbol, string interval, string period, string cookie = null, string xCsrf = null)
        {
             ApiResponse<PrivateAccuracyResponse> localVarResponse = V1PrivateAccuracySymbolIntervalPeriodGetWithHttpInfo(symbol, interval, period, cookie, xCsrf);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Accuracy The accuracy response contains the following attributes.  + &#x60;rmse&#x60; Root Mean Square Error  + &#x60;mae&#x60; Mean Absolute error  + &#x60;r2&#x60; R Squared  + &#x60;ci&#x60; Confidence Interval lower and upper error bounds
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="interval">The forecast interval, 1h or 1d.</param>
        /// <param name="period">The period for computing the accuracy, such as the past 7 days.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>ApiResponse of PrivateAccuracyResponse</returns>
        public ApiResponse< PrivateAccuracyResponse > V1PrivateAccuracySymbolIntervalPeriodGetWithHttpInfo (string symbol, string interval, string period, string cookie = null, string xCsrf = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PrivateApi->V1PrivateAccuracySymbolIntervalPeriodGet");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling PrivateApi->V1PrivateAccuracySymbolIntervalPeriodGet");
            // verify the required parameter 'period' is set
            if (period == null)
                throw new ApiException(400, "Missing required parameter 'period' when calling PrivateApi->V1PrivateAccuracySymbolIntervalPeriodGet");

            var localVarPath = "/v1/private/accuracy/{symbol}/{interval}/{period}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter
            if (interval != null) localVarPathParams.Add("interval", this.Configuration.ApiClient.ParameterToString(interval)); // path parameter
            if (period != null) localVarPathParams.Add("period", this.Configuration.ApiClient.ParameterToString(period)); // path parameter
            if (cookie != null) localVarHeaderParams.Add("Cookie", this.Configuration.ApiClient.ParameterToString(cookie)); // header parameter
            if (xCsrf != null) localVarHeaderParams.Add("X-csrf", this.Configuration.ApiClient.ParameterToString(xCsrf)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PrivateAccuracySymbolIntervalPeriodGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrivateAccuracyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PrivateAccuracyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrivateAccuracyResponse)));
        }

        /// <summary>
        /// Accuracy The accuracy response contains the following attributes.  + &#x60;rmse&#x60; Root Mean Square Error  + &#x60;mae&#x60; Mean Absolute error  + &#x60;r2&#x60; R Squared  + &#x60;ci&#x60; Confidence Interval lower and upper error bounds
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="interval">The forecast interval, 1h or 1d.</param>
        /// <param name="period">The period for computing the accuracy, such as the past 7 days.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>Task of PrivateAccuracyResponse</returns>
        public async System.Threading.Tasks.Task<PrivateAccuracyResponse> V1PrivateAccuracySymbolIntervalPeriodGetAsync (string symbol, string interval, string period, string cookie = null, string xCsrf = null)
        {
             ApiResponse<PrivateAccuracyResponse> localVarResponse = await V1PrivateAccuracySymbolIntervalPeriodGetAsyncWithHttpInfo(symbol, interval, period, cookie, xCsrf);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Accuracy The accuracy response contains the following attributes.  + &#x60;rmse&#x60; Root Mean Square Error  + &#x60;mae&#x60; Mean Absolute error  + &#x60;r2&#x60; R Squared  + &#x60;ci&#x60; Confidence Interval lower and upper error bounds
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="interval">The forecast interval, 1h or 1d.</param>
        /// <param name="period">The period for computing the accuracy, such as the past 7 days.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>Task of ApiResponse (PrivateAccuracyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PrivateAccuracyResponse>> V1PrivateAccuracySymbolIntervalPeriodGetAsyncWithHttpInfo (string symbol, string interval, string period, string cookie = null, string xCsrf = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PrivateApi->V1PrivateAccuracySymbolIntervalPeriodGet");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling PrivateApi->V1PrivateAccuracySymbolIntervalPeriodGet");
            // verify the required parameter 'period' is set
            if (period == null)
                throw new ApiException(400, "Missing required parameter 'period' when calling PrivateApi->V1PrivateAccuracySymbolIntervalPeriodGet");

            var localVarPath = "/v1/private/accuracy/{symbol}/{interval}/{period}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter
            if (interval != null) localVarPathParams.Add("interval", this.Configuration.ApiClient.ParameterToString(interval)); // path parameter
            if (period != null) localVarPathParams.Add("period", this.Configuration.ApiClient.ParameterToString(period)); // path parameter
            if (cookie != null) localVarHeaderParams.Add("Cookie", this.Configuration.ApiClient.ParameterToString(cookie)); // header parameter
            if (xCsrf != null) localVarHeaderParams.Add("X-csrf", this.Configuration.ApiClient.ParameterToString(xCsrf)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PrivateAccuracySymbolIntervalPeriodGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrivateAccuracyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PrivateAccuracyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrivateAccuracyResponse)));
        }

        /// <summary>
        /// Forecast The forecast response contains a sequence of forecasts at the specified intervals, with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;low&#x60; forecasted high during the period  + &#x60;high&#x60; forecasted low during the period  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="interval">The forecast interval, 1h or 1d.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>PrivateForecastResponse</returns>
        public PrivateForecastResponse V1PrivateForecastSymbolIntervalGet (string symbol, string interval, string cookie = null, string xCsrf = null)
        {
             ApiResponse<PrivateForecastResponse> localVarResponse = V1PrivateForecastSymbolIntervalGetWithHttpInfo(symbol, interval, cookie, xCsrf);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Forecast The forecast response contains a sequence of forecasts at the specified intervals, with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;low&#x60; forecasted high during the period  + &#x60;high&#x60; forecasted low during the period  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="interval">The forecast interval, 1h or 1d.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>ApiResponse of PrivateForecastResponse</returns>
        public ApiResponse< PrivateForecastResponse > V1PrivateForecastSymbolIntervalGetWithHttpInfo (string symbol, string interval, string cookie = null, string xCsrf = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PrivateApi->V1PrivateForecastSymbolIntervalGet");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling PrivateApi->V1PrivateForecastSymbolIntervalGet");

            var localVarPath = "/v1/private/forecast/{symbol}/{interval}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter
            if (interval != null) localVarPathParams.Add("interval", this.Configuration.ApiClient.ParameterToString(interval)); // path parameter
            if (cookie != null) localVarHeaderParams.Add("Cookie", this.Configuration.ApiClient.ParameterToString(cookie)); // header parameter
            if (xCsrf != null) localVarHeaderParams.Add("X-csrf", this.Configuration.ApiClient.ParameterToString(xCsrf)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PrivateForecastSymbolIntervalGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrivateForecastResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PrivateForecastResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrivateForecastResponse)));
        }

        /// <summary>
        /// Forecast The forecast response contains a sequence of forecasts at the specified intervals, with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;low&#x60; forecasted high during the period  + &#x60;high&#x60; forecasted low during the period  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="interval">The forecast interval, 1h or 1d.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>Task of PrivateForecastResponse</returns>
        public async System.Threading.Tasks.Task<PrivateForecastResponse> V1PrivateForecastSymbolIntervalGetAsync (string symbol, string interval, string cookie = null, string xCsrf = null)
        {
             ApiResponse<PrivateForecastResponse> localVarResponse = await V1PrivateForecastSymbolIntervalGetAsyncWithHttpInfo(symbol, interval, cookie, xCsrf);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Forecast The forecast response contains a sequence of forecasts at the specified intervals, with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;low&#x60; forecasted high during the period  + &#x60;high&#x60; forecasted low during the period  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="interval">The forecast interval, 1h or 1d.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>Task of ApiResponse (PrivateForecastResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PrivateForecastResponse>> V1PrivateForecastSymbolIntervalGetAsyncWithHttpInfo (string symbol, string interval, string cookie = null, string xCsrf = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PrivateApi->V1PrivateForecastSymbolIntervalGet");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling PrivateApi->V1PrivateForecastSymbolIntervalGet");

            var localVarPath = "/v1/private/forecast/{symbol}/{interval}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter
            if (interval != null) localVarPathParams.Add("interval", this.Configuration.ApiClient.ParameterToString(interval)); // path parameter
            if (cookie != null) localVarHeaderParams.Add("Cookie", this.Configuration.ApiClient.ParameterToString(cookie)); // header parameter
            if (xCsrf != null) localVarHeaderParams.Add("X-csrf", this.Configuration.ApiClient.ParameterToString(xCsrf)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PrivateForecastSymbolIntervalGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrivateForecastResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PrivateForecastResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrivateForecastResponse)));
        }

        /// <summary>
        /// Forecast Time 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="interval">The forecast interval, 1h or 1d.</param>
        /// <param name="period">The period for computing the error bounds, typically 7d or 30d.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>PrivateForecastTimeResponse</returns>
        public PrivateForecastTimeResponse V1PrivateForecastTimeSymbolIntervalPeriodGet (string symbol, string interval, string period, string cookie = null, string xCsrf = null)
        {
             ApiResponse<PrivateForecastTimeResponse> localVarResponse = V1PrivateForecastTimeSymbolIntervalPeriodGetWithHttpInfo(symbol, interval, period, cookie, xCsrf);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Forecast Time 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="interval">The forecast interval, 1h or 1d.</param>
        /// <param name="period">The period for computing the error bounds, typically 7d or 30d.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>ApiResponse of PrivateForecastTimeResponse</returns>
        public ApiResponse< PrivateForecastTimeResponse > V1PrivateForecastTimeSymbolIntervalPeriodGetWithHttpInfo (string symbol, string interval, string period, string cookie = null, string xCsrf = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PrivateApi->V1PrivateForecastTimeSymbolIntervalPeriodGet");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling PrivateApi->V1PrivateForecastTimeSymbolIntervalPeriodGet");
            // verify the required parameter 'period' is set
            if (period == null)
                throw new ApiException(400, "Missing required parameter 'period' when calling PrivateApi->V1PrivateForecastTimeSymbolIntervalPeriodGet");

            var localVarPath = "/v1/private/forecast-time/{symbol}/{interval}/{period}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter
            if (interval != null) localVarPathParams.Add("interval", this.Configuration.ApiClient.ParameterToString(interval)); // path parameter
            if (period != null) localVarPathParams.Add("period", this.Configuration.ApiClient.ParameterToString(period)); // path parameter
            if (cookie != null) localVarHeaderParams.Add("Cookie", this.Configuration.ApiClient.ParameterToString(cookie)); // header parameter
            if (xCsrf != null) localVarHeaderParams.Add("X-csrf", this.Configuration.ApiClient.ParameterToString(xCsrf)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PrivateForecastTimeSymbolIntervalPeriodGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrivateForecastTimeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PrivateForecastTimeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrivateForecastTimeResponse)));
        }

        /// <summary>
        /// Forecast Time 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="interval">The forecast interval, 1h or 1d.</param>
        /// <param name="period">The period for computing the error bounds, typically 7d or 30d.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>Task of PrivateForecastTimeResponse</returns>
        public async System.Threading.Tasks.Task<PrivateForecastTimeResponse> V1PrivateForecastTimeSymbolIntervalPeriodGetAsync (string symbol, string interval, string period, string cookie = null, string xCsrf = null)
        {
             ApiResponse<PrivateForecastTimeResponse> localVarResponse = await V1PrivateForecastTimeSymbolIntervalPeriodGetAsyncWithHttpInfo(symbol, interval, period, cookie, xCsrf);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Forecast Time 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="interval">The forecast interval, 1h or 1d.</param>
        /// <param name="period">The period for computing the error bounds, typically 7d or 30d.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>Task of ApiResponse (PrivateForecastTimeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PrivateForecastTimeResponse>> V1PrivateForecastTimeSymbolIntervalPeriodGetAsyncWithHttpInfo (string symbol, string interval, string period, string cookie = null, string xCsrf = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PrivateApi->V1PrivateForecastTimeSymbolIntervalPeriodGet");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling PrivateApi->V1PrivateForecastTimeSymbolIntervalPeriodGet");
            // verify the required parameter 'period' is set
            if (period == null)
                throw new ApiException(400, "Missing required parameter 'period' when calling PrivateApi->V1PrivateForecastTimeSymbolIntervalPeriodGet");

            var localVarPath = "/v1/private/forecast-time/{symbol}/{interval}/{period}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter
            if (interval != null) localVarPathParams.Add("interval", this.Configuration.ApiClient.ParameterToString(interval)); // path parameter
            if (period != null) localVarPathParams.Add("period", this.Configuration.ApiClient.ParameterToString(period)); // path parameter
            if (cookie != null) localVarHeaderParams.Add("Cookie", this.Configuration.ApiClient.ParameterToString(cookie)); // header parameter
            if (xCsrf != null) localVarHeaderParams.Add("X-csrf", this.Configuration.ApiClient.ParameterToString(xCsrf)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PrivateForecastTimeSymbolIntervalPeriodGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrivateForecastTimeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PrivateForecastTimeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrivateForecastTimeResponse)));
        }

        /// <summary>
        /// Trend The trend response contains a collection of forecasts for different intervals with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;interval&#x60; interval in hours that the forecast is applicable for  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>PublicTrendResponse</returns>
        public PublicTrendResponse V1PrivateTrendSymbolGet (string symbol, string cookie = null, string xCsrf = null)
        {
             ApiResponse<PublicTrendResponse> localVarResponse = V1PrivateTrendSymbolGetWithHttpInfo(symbol, cookie, xCsrf);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Trend The trend response contains a collection of forecasts for different intervals with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;interval&#x60; interval in hours that the forecast is applicable for  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>ApiResponse of PublicTrendResponse</returns>
        public ApiResponse< PublicTrendResponse > V1PrivateTrendSymbolGetWithHttpInfo (string symbol, string cookie = null, string xCsrf = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PrivateApi->V1PrivateTrendSymbolGet");

            var localVarPath = "/v1/private/trend/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter
            if (cookie != null) localVarHeaderParams.Add("Cookie", this.Configuration.ApiClient.ParameterToString(cookie)); // header parameter
            if (xCsrf != null) localVarHeaderParams.Add("X-csrf", this.Configuration.ApiClient.ParameterToString(xCsrf)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PrivateTrendSymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicTrendResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicTrendResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicTrendResponse)));
        }

        /// <summary>
        /// Trend The trend response contains a collection of forecasts for different intervals with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;interval&#x60; interval in hours that the forecast is applicable for  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>Task of PublicTrendResponse</returns>
        public async System.Threading.Tasks.Task<PublicTrendResponse> V1PrivateTrendSymbolGetAsync (string symbol, string cookie = null, string xCsrf = null)
        {
             ApiResponse<PublicTrendResponse> localVarResponse = await V1PrivateTrendSymbolGetAsyncWithHttpInfo(symbol, cookie, xCsrf);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Trend The trend response contains a collection of forecasts for different intervals with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;interval&#x60; interval in hours that the forecast is applicable for  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The cryptocurrency symbol.</param>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>Task of ApiResponse (PublicTrendResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PublicTrendResponse>> V1PrivateTrendSymbolGetAsyncWithHttpInfo (string symbol, string cookie = null, string xCsrf = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PrivateApi->V1PrivateTrendSymbolGet");

            var localVarPath = "/v1/private/trend/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter
            if (cookie != null) localVarHeaderParams.Add("Cookie", this.Configuration.ApiClient.ParameterToString(cookie)); // header parameter
            if (xCsrf != null) localVarHeaderParams.Add("X-csrf", this.Configuration.ApiClient.ParameterToString(xCsrf)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PrivateTrendSymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicTrendResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicTrendResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicTrendResponse)));
        }

        /// <summary>
        /// Trend Tabular The trend tabular response contains a collection of forecasts for all supported cryptocurrencies at different intervals with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;interval&#x60; interval in hours that the forecast is applicable for  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>PrivateTrendTabularResponse</returns>
        public PrivateTrendTabularResponse V1PrivateTrendTabularGet (string cookie = null, string xCsrf = null)
        {
             ApiResponse<PrivateTrendTabularResponse> localVarResponse = V1PrivateTrendTabularGetWithHttpInfo(cookie, xCsrf);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Trend Tabular The trend tabular response contains a collection of forecasts for all supported cryptocurrencies at different intervals with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;interval&#x60; interval in hours that the forecast is applicable for  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>ApiResponse of PrivateTrendTabularResponse</returns>
        public ApiResponse< PrivateTrendTabularResponse > V1PrivateTrendTabularGetWithHttpInfo (string cookie = null, string xCsrf = null)
        {

            var localVarPath = "/v1/private/trend-tabular";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cookie != null) localVarHeaderParams.Add("Cookie", this.Configuration.ApiClient.ParameterToString(cookie)); // header parameter
            if (xCsrf != null) localVarHeaderParams.Add("X-csrf", this.Configuration.ApiClient.ParameterToString(xCsrf)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PrivateTrendTabularGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrivateTrendTabularResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PrivateTrendTabularResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrivateTrendTabularResponse)));
        }

        /// <summary>
        /// Trend Tabular The trend tabular response contains a collection of forecasts for all supported cryptocurrencies at different intervals with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;interval&#x60; interval in hours that the forecast is applicable for  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>Task of PrivateTrendTabularResponse</returns>
        public async System.Threading.Tasks.Task<PrivateTrendTabularResponse> V1PrivateTrendTabularGetAsync (string cookie = null, string xCsrf = null)
        {
             ApiResponse<PrivateTrendTabularResponse> localVarResponse = await V1PrivateTrendTabularGetAsyncWithHttpInfo(cookie, xCsrf);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Trend Tabular The trend tabular response contains a collection of forecasts for all supported cryptocurrencies at different intervals with the following attributes.  + &#x60;time_start&#x60; start time of the period the forecast is applicable for  + &#x60;time_end&#x60; end time of the period the forecast is applicable for  + &#x60;interval&#x60; interval in hours that the forecast is applicable for  + &#x60;weighted_price&#x60; forecasted weighted price during the period  + &#x60;change_pct&#x60; percent change in price for forecasted weighted_price relative to current price  + &#x60;change_usd&#x60; dollar change in price for forecasted weighted_price relative to current price
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cookie">e.g. csrf&#x3D;b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <param name="xCsrf">e.g. b1820141-1bad-4a9c-93c0-52022817ce89 (optional)</param>
        /// <returns>Task of ApiResponse (PrivateTrendTabularResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PrivateTrendTabularResponse>> V1PrivateTrendTabularGetAsyncWithHttpInfo (string cookie = null, string xCsrf = null)
        {

            var localVarPath = "/v1/private/trend-tabular";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cookie != null) localVarHeaderParams.Add("Cookie", this.Configuration.ApiClient.ParameterToString(cookie)); // header parameter
            if (xCsrf != null) localVarHeaderParams.Add("X-csrf", this.Configuration.ApiClient.ParameterToString(xCsrf)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PrivateTrendTabularGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrivateTrendTabularResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PrivateTrendTabularResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrivateTrendTabularResponse)));
        }

    }
}
